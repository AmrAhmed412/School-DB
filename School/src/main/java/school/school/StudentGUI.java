/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package school.school;
import javax.swing.*;
import javax.swing.table.TableModel;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author amr23
 */
public class StudentGUI extends javax.swing.JFrame {

    /**
     * Creates new form StudentGUI
     */
    public StudentGUI() {
        initComponents();
        // Filling the table with all students
        StudentGUI.this.UpdateStudentTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentAddressTXT = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        EditBtnSTD = new javax.swing.JButton();
        AddBtnSTD = new javax.swing.JButton();
        STDNameText_ADD = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        STD_IDText_ADD = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        STD_CRS_ID = new javax.swing.JTextField();
        STD_CourseID = new javax.swing.JTextField();
        STD_Grade = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        STD_DataTable = new javax.swing.JTable();
        DelBtnSTD = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        STDNumber = new javax.swing.JTextField();
        STD_ShowAllCourses = new javax.swing.JButton();
        STD_ID_TXT = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        STD_ShowAllStudents = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        STDfees = new javax.swing.JTextField();
        STDage = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        DropCourseBTN = new javax.swing.JButton();
        EnrollCourseBTN = new javax.swing.JButton();
        AddBtnSTD2 = new javax.swing.JButton();
        STD_ID_Drop = new javax.swing.JTextField();
        STD_CourseID_Drop = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setTitle("Student's Menu");

        StudentAddressTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentAddressTXTActionPerformed(evt);
            }
        });

        jLabel1.setText("Address");

        EditBtnSTD.setText("Edit");
        EditBtnSTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnSTDActionPerformed(evt);
            }
        });

        AddBtnSTD.setText("Add");
        AddBtnSTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnSTDActionPerformed(evt);
            }
        });

        STDNameText_ADD.setName(""); // NOI18N

        jLabel2.setText("Student Name:");

        jLabel3.setText("Student ID:");

        jLabel4.setText("Student ID:");

        jLabel5.setText("Course ID:");

        jLabel6.setText("Grade");

        STD_DataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(STD_DataTable);

        DelBtnSTD.setText("Delete");
        DelBtnSTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelBtnSTDActionPerformed(evt);
            }
        });

        jLabel10.setText("Number");

        STD_ShowAllCourses.setText("Show All Courses");
        STD_ShowAllCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STD_ShowAllCoursesActionPerformed(evt);
            }
        });

        jLabel11.setText("Student ID:");

        STD_ShowAllStudents.setText("Show All Students");
        STD_ShowAllStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STD_ShowAllStudentsActionPerformed(evt);
            }
        });

        jLabel12.setText("Fees");

        STDage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STDageActionPerformed(evt);
            }
        });

        jLabel7.setText("Age");

        DropCourseBTN.setText("Drop Course");
        DropCourseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DropCourseBTNActionPerformed(evt);
            }
        });

        EnrollCourseBTN.setText("Enroll in Course");
        EnrollCourseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnrollCourseBTNActionPerformed(evt);
            }
        });

        AddBtnSTD2.setText("Edit Grade");
        AddBtnSTD2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnSTD2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Student ID:");

        jLabel9.setText("Course ID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(STD_ID_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(STD_ShowAllCourses, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(DelBtnSTD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(StudentAddressTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(STD_IDText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(STDNameText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(STDage, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(STDfees, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(STDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddBtnSTD, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditBtnSTD, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(128, 128, 128)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(19, 19, 19))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addGap(20, 20, 20)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(STD_Grade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(STD_CourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(STD_CRS_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(EnrollCourseBTN)
                                    .addComponent(AddBtnSTD2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(20, 20, 20))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(19, 19, 19)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(STD_CourseID_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(STD_ID_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(DropCourseBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(231, 231, 231)
                                .addComponent(STD_ShowAllStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(STD_ID_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(STD_CourseID_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(STD_CRS_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(STD_CourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(STD_Grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(AddBtnSTD2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(EnrollCourseBTN))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(STD_IDText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel2)
                                                    .addComponent(AddBtnSTD))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel1)
                                                    .addComponent(EditBtnSTD)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(STDNameText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(StudentAddressTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel10))
                                    .addComponent(STDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(STDage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(STDfees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addComponent(DelBtnSTD)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(STD_ShowAllCourses))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(STD_ID_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(DropCourseBTN)))
                .addGap(34, 34, 34)
                .addComponent(STD_ShowAllStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StudentAddressTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentAddressTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StudentAddressTXTActionPerformed
    
    // Opens a window box with the message
    public void ShowMessage(String Message)
    {
        JOptionPane.showMessageDialog(this,Message);
    }
    
    // Overloading the function with empty strings to avoid the where clause
    public void UpdateStudentTable()
    {
        // Shows the Student table
        UpdateStudentTable("");
    }

    public void UpdateStudentTable(String str)
    {
        // Removing top empty rows from the table
        DefaultTableModel dtm = (DefaultTableModel) STD_DataTable.getModel();
        dtm.setRowCount(0);
        try {
            // Executing the query and filling the table
            ResultSet rs = new StudentRepo().ShowTable(str);
            // The function will behave differntly according to the class calling it
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) STD_DataTable.getModel();
            int cols = rsmd.getColumnCount();
            String[] colName = new String [cols];
            for(int i=0; i<cols; i++)
            {
                colName[i] = rsmd.getColumnName(i+1);
            }
            model.setColumnIdentifiers(colName);
            String ID, name, address, number, age, fees;
            while(rs.next()) {
                ID=rs.getString(1);
                name=rs.getString(2);
                address=rs.getString(3);
                number=rs.getString(4);
                age=rs.getString(5);
                fees=rs.getString(6);
                String[] row= {ID, name, address, number, age, fees};
                model.addRow(row); // adding a row to the table
            }
        } catch (SQLException ex) {
            Logger.getLogger(CoursesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Overloading the function with empty strings to avoid the where clause
    public void UpdateStudentCourseTable()
    {
        // Shows the StudentCourse table
        UpdateStudentCourseTable("");
    }

    public void UpdateStudentCourseTable(String str)
    {
        // Removing top empty rows from the table
        DefaultTableModel dtm = (DefaultTableModel) STD_DataTable.getModel();
        dtm.setRowCount(0);
        try {
            // Executing the query and filling the table
            ResultSet rs = new StudentCourseService().ShowTable(str);
            // The function will behave differntly according to the class calling it
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) STD_DataTable.getModel();
            int cols = rsmd.getColumnCount();       // 8albn t7t momkn n-for loop 3la el rakam dh gowa el while
            String[] colName = new String [cols];
            for(int i=0; i<cols; i++)
            {
                colName[i] = rsmd.getColumnName(i+1);
            }
            model.setColumnIdentifiers(colName);
            String StudentID, CourseID, StudentName, CourseName, Grade;
            while(rs.next()) {
                StudentID=rs.getString(1);
                CourseID=rs.getString(2);
                StudentName=rs.getString(3);
                CourseName=rs.getString(4);
                Grade=rs.getString(5);
                String[] row= {StudentID, CourseID, StudentName, CourseName, Grade};
                model.addRow(row); // adding a row to the table
            }
        } catch (SQLException ex) {
            Logger.getLogger(CoursesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void AddBtnSTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnSTDActionPerformed
        // Checking if there is an empty text box
        if (STD_IDText_ADD.getText().equals(""))
        {
            ShowMessage("Student ID Field is empty.");
        }
        else if (STDNameText_ADD.getText().equals(""))
        {
            ShowMessage("Student Name Field is empty.");
        }
        else
        {
            String Age = STDage.getText();
            String Fees = STDfees.getText();
            if (STDage.getText().equals(""))
            {
                Age = "-1";     // assigning a default value
            }
            if (STDfees.getText().equals(""))
            {
                Fees = "-1";    // assigning a default value
            }
            try{
                Student STD = new Student(Integer.parseInt(STD_IDText_ADD.getText()), STDNameText_ADD.getText(), StudentAddressTXT.getText(),  STDNumber.getText(), null, Integer.parseInt(Age), Integer.parseInt(Fees));
                new StudentRepo().AddStudent(STD);
                // Adds student to DB table
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
        }
        UpdateStudentTable();
        // Shows the table after the addition
    }//GEN-LAST:event_AddBtnSTDActionPerformed

    private void STD_ShowAllCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STD_ShowAllCoursesActionPerformed
        // Checking if there is an empty text box
        if (STD_ID_TXT.getText().equals(""))
        {
            UpdateStudentCourseTable();     // In case ID text field is empty, show all Student courses
//            ShowMessage("Student ID Field is empty.");
        }
        else
        {
            try 
            {
                Student STD = new Student();
                STD.setID(Integer.parseInt(STD_ID_TXT.getText()));
                UpdateStudentCourseTable("Where Student.ID = " + STD.getID());
                // Shows the courses of that specific student
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
        }
    }//GEN-LAST:event_STD_ShowAllCoursesActionPerformed

    private void DelBtnSTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelBtnSTDActionPerformed
        // Checking if there is an empty text box
        if (STD_ID_TXT.getText().equals(""))
        {
            ShowMessage("Student ID Field is empty.");
        }
        else
        {
            Student STD = new Student();
            try{
                STD.setID(Integer.parseInt(STD_ID_TXT.getText()));
                new StudentRepo().DeleteStudent(STD);
                // Deletes the student from the DB
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
            
        }
        UpdateStudentTable();
        // Shows the table after the update
    }//GEN-LAST:event_DelBtnSTDActionPerformed

    private void EditBtnSTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnSTDActionPerformed
        // Checking if there is an empty text box
        if (STD_IDText_ADD.getText().equals(""))
        {
            ShowMessage("Student ID Field is empty.");
        }
        else
        {
            String Age = STDage.getText();
            String Fees = STDfees.getText();
            if (STDage.getText().equals(""))
            {
                Age = "-1";     // assigning a default value
            }
            if (STDfees.getText().equals(""))
            {
                Fees = "-1";    // assigning a default value
            }
            try{
                Student STD = new Student(Integer.parseInt(STD_IDText_ADD.getText()), STDNameText_ADD.getText(), StudentAddressTXT.getText(),  STDNumber.getText(), null, Integer.parseInt(Age), Integer.parseInt(Fees));
                new StudentRepo().EditStudent(STD);
                // Edits the student's info
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
        }
        UpdateStudentTable();
        // Shows the table after the update
    }//GEN-LAST:event_EditBtnSTDActionPerformed

    private void STD_ShowAllStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STD_ShowAllStudentsActionPerformed
        // Filling the table with all students
        UpdateStudentTable();
    }//GEN-LAST:event_STD_ShowAllStudentsActionPerformed

    private void STDageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STDageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_STDageActionPerformed

    private void DropCourseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DropCourseBTNActionPerformed
        // Checking if there is an empty text box
        if (STD_ID_Drop.getText().equals(""))
        {
            ShowMessage("Student ID Field is empty.");
        }
        else if (STD_CourseID_Drop.getText().equals(""))
        {
            ShowMessage("Course ID Field is empty.");
        }
        else
        {
            Student STD = new Student();
            Course CRS = new Course();
            try{
                STD.setID(Integer.parseInt(STD_ID_Drop.getText()));
                CRS.setID(Integer.parseInt(STD_CourseID_Drop.getText()));
                new StudentCourseService().Drop(STD, CRS);
                // Removes the course from the student
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
            
        }
        UpdateStudentCourseTable();
        // Shows the table after the update
    }//GEN-LAST:event_DropCourseBTNActionPerformed

    private void EnrollCourseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnrollCourseBTNActionPerformed
        // Checking for empty fields
        if (STD_CRS_ID.getText().equals(""))
        {
            ShowMessage("Student ID Field is empty.");
        }
        else if (STD_CourseID.getText().equals(""))
        {
            ShowMessage("Course ID Field is empty.");
        }
        else
        {
            try{
                StudentCourse STD_CRS = new StudentCourse(Integer.parseInt(STD_CRS_ID.getText()), Integer.parseInt(STD_CourseID.getText()), STD_Grade.getText());
                new StudentCourseService().Enroll(STD_CRS);
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
        }
        UpdateStudentCourseTable();
        // Shows the table after the update
    }//GEN-LAST:event_EnrollCourseBTNActionPerformed

    private void AddBtnSTD2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnSTD2ActionPerformed
        // Checking for empty fields
        if (STD_CRS_ID.getText().equals(""))
        {
            ShowMessage("Student ID Field is empty.");
        }
        else if (STD_CourseID.getText().equals(""))
        {
            ShowMessage("Course ID Field is empty.");
        }
        else if (STD_Grade.getText().equals(""))
        {
            ShowMessage("Grade Field is empty.");
        }
        else {
            try{
                StudentCourse STD_CRS = new StudentCourse(Integer.parseInt(STD_CRS_ID.getText()), Integer.parseInt(STD_CourseID.getText()), STD_Grade.getText());
                new StudentCourseService().EditGrade(STD_CRS);
                // Edits course grade of student
            }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
        }
        UpdateStudentCourseTable();
        // Shows the table after the update
    }//GEN-LAST:event_AddBtnSTD2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                // Showing the Student data window
//                new StudentGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtnSTD;
    private javax.swing.JButton AddBtnSTD2;
    private javax.swing.JButton DelBtnSTD;
    private javax.swing.JButton DropCourseBTN;
    private javax.swing.JButton EditBtnSTD;
    private javax.swing.JButton EnrollCourseBTN;
    private javax.swing.JTextField STDNameText_ADD;
    private javax.swing.JTextField STDNumber;
    private javax.swing.JTextField STD_CRS_ID;
    private javax.swing.JTextField STD_CourseID;
    private javax.swing.JTextField STD_CourseID_Drop;
    private javax.swing.JTable STD_DataTable;
    private javax.swing.JTextField STD_Grade;
    private javax.swing.JTextField STD_IDText_ADD;
    private javax.swing.JTextField STD_ID_Drop;
    private javax.swing.JTextField STD_ID_TXT;
    private javax.swing.JButton STD_ShowAllCourses;
    private javax.swing.JButton STD_ShowAllStudents;
    private javax.swing.JTextField STDage;
    private javax.swing.JTextField STDfees;
    private javax.swing.JTextField StudentAddressTXT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
