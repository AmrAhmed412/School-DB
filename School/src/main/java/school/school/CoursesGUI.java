/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package school.school;
import javax.swing.*;
import javax.swing.table.TableModel;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
//import school.school.StudentGUI.Student;
/**
 *
 * @author amr23
 */
public class CoursesGUI extends javax.swing.JFrame {

    /**
     * Creates new form CoursesGUI
     */
//    public Course c = new Course();
//    public Student std = new Student();
//    public Teacher T = new Teacher();
       
    public CoursesGUI() {
        initComponents();
        // Filling the table with all courses
//        c.Table_Data_Filling(CRS_DataTable);
        CoursesGUI.this.UpdateCourseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CRS_CourseID_Del_Text = new javax.swing.JTextField();
        DelBtnCRS = new javax.swing.JButton();
        CRS_ShowAllTeachers = new javax.swing.JButton();
        CRSShowAllCoursesText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CRS_CourseID_Edit_Text = new javax.swing.JTextField();
        CRS_NewName_Edit_Text = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CRS_DataTable = new javax.swing.JTable();
        EditBtnCRS = new javax.swing.JButton();
        AddBtnCRS = new javax.swing.JButton();
        CRSNameText_ADD = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CRS_IDText_ADD = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        CRS_ShowAllStudents = new javax.swing.JButton();
        CRS_ShowAllCourses = new javax.swing.JButton();

        setTitle("Courses' Menu");

        DelBtnCRS.setText("Delete");
        DelBtnCRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelBtnCRSActionPerformed(evt);
            }
        });

        CRS_ShowAllTeachers.setText("Show All Teachers");
        CRS_ShowAllTeachers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CRS_ShowAllTeachersActionPerformed(evt);
            }
        });

        jLabel11.setText("Course ID:");

        jLabel3.setText("Course ID:");

        jLabel5.setText("Course ID:");

        jLabel6.setText("New Course Name");

        CRS_DataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(CRS_DataTable);

        EditBtnCRS.setText("Edit");
        EditBtnCRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnCRSActionPerformed(evt);
            }
        });

        AddBtnCRS.setText("Add");
        AddBtnCRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnCRSActionPerformed(evt);
            }
        });

        CRSNameText_ADD.setName(""); // NOI18N

        jLabel2.setText("Course Name:");

        jLabel9.setText("Course ID:");

        CRS_ShowAllStudents.setText("Show All Students");
        CRS_ShowAllStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CRS_ShowAllStudentsActionPerformed(evt);
            }
        });

        CRS_ShowAllCourses.setText("Show All Courses");
        CRS_ShowAllCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CRS_ShowAllCoursesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(32, 32, 32))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CRS_IDText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CRSNameText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addComponent(AddBtnCRS, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5)
                                        .addGap(20, 20, 20))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CRS_NewName_Edit_Text, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CRS_CourseID_Edit_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EditBtnCRS, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(CRSShowAllCoursesText, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(CRS_CourseID_Del_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CRS_ShowAllStudents)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CRS_ShowAllTeachers))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(DelBtnCRS, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CRS_ShowAllCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddBtnCRS)
                            .addComponent(EditBtnCRS)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CRS_CourseID_Edit_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CRS_NewName_Edit_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CRS_IDText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CRSNameText_ADD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CRSShowAllCoursesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CRS_ShowAllTeachers)
                    .addComponent(jLabel11)
                    .addComponent(CRS_ShowAllStudents))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(CRS_CourseID_Del_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DelBtnCRS)
                    .addComponent(CRS_ShowAllCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void ShowMessage(String Message)
    {
        JOptionPane.showMessageDialog(this,Message);
    }
    
    // Overloading the function with empty strings to avoid the where clause
    public void UpdateCourseTable()
    {
        UpdateCourseTable("");
    }

    public void UpdateCourseTable(String str)
    {
        // Removing top empty rows from the table
        DefaultTableModel dtm = (DefaultTableModel) CRS_DataTable.getModel();
        dtm.setRowCount(0);
        try {
            // Executing the query and filling the table
            ResultSet rs = new CourseRepo().ShowTable(str);
            // The function will behave differntly according to the class calling it
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) CRS_DataTable.getModel();
            int cols = rsmd.getColumnCount();
            String[] colName = new String [cols];
            for(int i=0; i<cols; i++)
            {
                colName[i] = rsmd.getColumnName(i+1);
            }
            model.setColumnIdentifiers(colName);
            String ID, name;
            while(rs.next()) {
                ID=rs.getString(1);
                name=rs.getString(2);
                String[] row= {ID, name};
                model.addRow(row); // adding a row to the table
            }
        } catch (SQLException ex) {
            Logger.getLogger(CoursesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Overloading the function with empty strings to avoid the where clause
    public void UpdateStudentCourseTable()
    {
        UpdateStudentCourseTable("");
    }

    public void UpdateStudentCourseTable(String str)
    {
        // Removing top empty rows from the table
        DefaultTableModel dtm = (DefaultTableModel) CRS_DataTable.getModel();
        dtm.setRowCount(0);
        try {
            // Executing the query and filling the table
            ResultSet rs = new StudentCourseService().ShowTable(str);
            // The function will behave differntly according to the class calling it
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) CRS_DataTable.getModel();
            int cols = rsmd.getColumnCount();       // 8albn t7t momkn n-for loop 3la el rakam dh gowa el while
            String[] colName = new String [cols];
            for(int i=0; i<cols; i++)
            {
                colName[i] = rsmd.getColumnName(i+1);
            }
            model.setColumnIdentifiers(colName);
            String StudentID, CourseID, StudentName, CourseName, Grade;
            while(rs.next()) {
                StudentID=rs.getString(1);
                CourseID=rs.getString(2);
                StudentName=rs.getString(3);
                CourseName=rs.getString(4);
                Grade=rs.getString(5);
                String[] row= {StudentID, CourseID, StudentName, CourseName, Grade};
                model.addRow(row); // adding a row to the table
            }
        } catch (SQLException ex) {
            Logger.getLogger(CoursesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Overloading the function with empty strings to avoid the where clause
    public void UpdateTeacherCourseTable()
    {
        UpdateTeacherCourseTable("");
    }

    public void UpdateTeacherCourseTable(String str)
    {
        // Removing top empty rows from the table
        DefaultTableModel dtm = (DefaultTableModel) CRS_DataTable.getModel();
        dtm.setRowCount(0);
        try {
            // Executing the query and filling the table
            ResultSet rs = new TeacherCourseService().ShowTable(str);
            // The function will behave differntly according to the class calling it
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) CRS_DataTable.getModel();
            int cols = rsmd.getColumnCount();       // 8albn t7t momkn n-for loop 3la el rakam dh gowa el while
            String[] colName = new String [cols];
            for(int i=0; i<cols; i++)
            {
                colName[i] = rsmd.getColumnName(i+1);
            }
            model.setColumnIdentifiers(colName);
            String TeacherID, CourseID, TeacherName, CourseName;
            while(rs.next()) {
                TeacherID=rs.getString(1);
                CourseID=rs.getString(2);
                TeacherName=rs.getString(3);
                CourseName=rs.getString(4);
                String[] row= {TeacherID, CourseID, TeacherName, CourseName};
                model.addRow(row); // adding a row to the table
            }
        } catch (SQLException ex) {
            Logger.getLogger(CoursesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void DelBtnCRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelBtnCRSActionPerformed
        // Checking if there is an empty text box
        if (CRS_CourseID_Del_Text.getText().equals(""))
        {
            ShowMessage("Course ID Field is empty.");
        }
        else 
        {
            try
            {
                Course CRS = new Course();
                CRS.setID(Integer.parseInt(CRS_CourseID_Del_Text.getText()));
                new CourseRepo().DeleteCourse(CRS);
            }
            catch (Exception e)
            {
                ShowMessage(e.getMessage());
            }
        }
        UpdateCourseTable();
        // Deleting that Course's data
    }//GEN-LAST:event_DelBtnCRSActionPerformed

    private void CRS_ShowAllTeachersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CRS_ShowAllTeachersActionPerformed
        if (CRSShowAllCoursesText.getText().equals(""))
        {
            UpdateTeacherCourseTable();     // In case ID text field is empty, show all Teacher courses
        }
        else
        {
           try{
               Course CRS = new Course();
               CRS.setID(Integer.parseInt(CRSShowAllCoursesText.getText()));
            UpdateTeacherCourseTable("Where Course.ID = " + CRS.getID());
           }
            catch(Exception e)
            {
                ShowMessage(e.getMessage());
            }
        } // Filling the table with the Course's students 
    }//GEN-LAST:event_CRS_ShowAllTeachersActionPerformed

    private void EditBtnCRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnCRSActionPerformed
        // Checking if there is an empty text box
        if (CRS_CourseID_Edit_Text.getText().equals(""))
        {
            ShowMessage("Course ID Field is empty.");
        }
        else if (CRS_NewName_Edit_Text.getText().equals(""))
        {
            ShowMessage("New Name Field is empty.");
        }
        else
        {
            try
            {
                Course CRS = new Course(Integer.parseInt(CRS_CourseID_Edit_Text.getText()), CRS_NewName_Edit_Text.getText());
                new CourseRepo().EditCourse(CRS);
            }
            catch (Exception E)
            {
                ShowMessage(E.getMessage());
            }
        }
        UpdateCourseTable();
//            c.EditCourse(CRS_NewName_Edit_Text.getText(), CRS_CourseID_Edit_Text.getText(), CRS_DataTable);
        // Editing that Course's name
    }//GEN-LAST:event_EditBtnCRSActionPerformed

    private void AddBtnCRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnCRSActionPerformed
        // Checking if there is an empty text box
        if (CRSNameText_ADD.getText().equals(""))
        {
            ShowMessage("Course Name Field is empty.");
        }
        else if (CRS_IDText_ADD.getText().equals(""))
        {
            ShowMessage("Course ID Field is empty.");
        }
        else
        {
            try
            {
                Course CRS = new Course(Integer.parseInt(CRS_IDText_ADD.getText()), CRSNameText_ADD.getText());
                new CourseRepo().AddCourse(CRS);
            }
            catch (Exception e)
            {
                ShowMessage(e.getMessage());
            } 
        }
        UpdateCourseTable();
        // in case all fields have been filled, add the Course
    }//GEN-LAST:event_AddBtnCRSActionPerformed

    private void CRS_ShowAllStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CRS_ShowAllStudentsActionPerformed
        // Checking if there is an empty text box
        if (CRSShowAllCoursesText.getText().equals(""))
        {
            UpdateStudentCourseTable();     // In case ID text field is empty, show all Student courses
        }
        else
        {
            try{
                Course CRS = new Course();
            CRS.setID(Integer.parseInt(CRSShowAllCoursesText.getText()));
            UpdateStudentCourseTable("Where Course.ID = " + CRS.getID());
            }
            catch(Exception e)
            {
                 ShowMessage(e.getMessage());
            }  
        } // Filling the table with the Course's students 
    }//GEN-LAST:event_CRS_ShowAllStudentsActionPerformed

    private void CRS_ShowAllCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CRS_ShowAllCoursesActionPerformed
        // TODO add your handling code here:
        // Filling the table with all courses
        UpdateCourseTable();
    }//GEN-LAST:event_CRS_ShowAllCoursesActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CoursesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CoursesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CoursesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CoursesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CoursesGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtnCRS;
    private javax.swing.JTextField CRSNameText_ADD;
    private javax.swing.JTextField CRSShowAllCoursesText;
    private javax.swing.JTextField CRS_CourseID_Del_Text;
    private javax.swing.JTextField CRS_CourseID_Edit_Text;
    private javax.swing.JTable CRS_DataTable;
    private javax.swing.JTextField CRS_IDText_ADD;
    private javax.swing.JTextField CRS_NewName_Edit_Text;
    private javax.swing.JButton CRS_ShowAllCourses;
    private javax.swing.JButton CRS_ShowAllStudents;
    private javax.swing.JButton CRS_ShowAllTeachers;
    private javax.swing.JButton DelBtnCRS;
    private javax.swing.JButton EditBtnCRS;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}

